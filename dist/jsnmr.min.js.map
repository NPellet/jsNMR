{"version":3,"sources":["src/shape.1dnmr.js","src/assignment.js","src/sd.js","src/nmr.js"],"names":["define","$","Graph","GraphNmrSignal1D","graph","options","this","lineHeight","GraphLine","getConstructor","extend","prototype","createDom","_createHandles","transform","width","height","stroke","fill","cursor","_dom","document","createElementNS","ns","maxLines","nbLines","lines","Array","i","group","appendChild","setAttribute","j","mean","std","max","serie","series","data","length","Math","abs","pow","sqrt","noiseLevel","element","redrawImpl","setHandles","redrawLines","peaks","findxs","baseLine","_getPosition","x","x1","currentPos2y","currentPos1y","y","parseFloat","getAttribute","highLigthLinesY","init","v1","searchClosestValue","getFromData","v2","dataIndex","xBeforeIndexArr","k","push","dx","X","Y","dY","ddY","maxY","stackInt","intervals","minddY","pop","e","console","log","signals","f","frecuency","possible","inter","linewith","points","sort","a","b","global","factory","module","exports","window","Constructor","self","bindingPairs","bindingLine","targetting","binding","bindingA","bindingB","highlighted","stashedLines","currentLines","mousedown","el","event","checkBindingPairs","shiftKey","graphs","lockShapes","preventDefault","stopPropagation","bb","getBBox","pos","position","left","top","otherTarget","targettable","targetEls","findTargettableElements","each","jsGraphIsShape","highlight","storeAttributes","attr","target","dom","find","bindableFilter","mouseup","unHighlight","restoreAttributes","domTarget","is","get","classList","contains","bindableFilterClass","bindSave","unlockShapes","mousemove","clientX","scrollX","clientY","scrollY","elements","getEquivalents","highlightEquivalents","eqs","l","allPairs","highlightPair","pair","concat","makeArray","unhighlight","force","unhighlightPair","jsGraphShape","map","targetB","elementsToHighlight","highlightedAttributes","selector","attributeEquivalents","els","fct","callback","line","posA","offset","posB","bbA","bbB","posMain","domGlobal","topSVG","lookForPair","removePair","setStrokeDasharray","applyStyle","getAssignment","splice","indexOf","A","B","setEvents","on","setAttributeNS","prepend","attrA","attrB","findElement","setAssignment","pairs","forEach","Assignment","amd","jQuery","SD","create","spectra","ESD","HeteroNuclearPeakOptimizer","toleranceX","toleranceY","clean","threshold","Number","NEGATIVE_INFINITY","z","HomoNuclearPeakOptimizer","diagonalError","tolerance","DEBUG","enhanceSymmetry","properties","initializeProperties","output","size","hits","index","signal","exist","checkCrossPeaks","count","completeMissingIfNeeded","toReturn","thisSignal","thisProp","addedPeaks","newSignal","nucleusX","nucleusY","resolutionX","resolutionY","shiftX","shiftY","tmpProp","diagX","diagY","updateProperties","cross","shift","crossPeaksX","crossPeaksY","type","symmetricSearch","distanceTo","signalsProperties","toImage","SimpleClustering","fullClusterGenerator","conn","nRows","clusterList","available","remaining","cluster","nextAv","toInclude","row","c","r","min","MathUtils","getMinMax","result","POSITIVE_INFINITY","FFTUtils","ifft2DArray","ft","ftRows","ftCols","tempTransform","nCols","FFT","tmpCols","re","im","iCol","iRow","bt","finalTransform","tmpRows","scale","indexB","fft2DArray","iRow0","iRow1","iRow2","iRow3","row1","row2","slice","fft1d","reconstructTwoRealFFT","fourierTransform","realTransform1","realTransform2","rm","rp","ip","convolute2DI","ftSignal","ftFilter","PeakFinders2D","smallFilter","getLoGnStdDevNMR","spectraData","isHomoNuclear","_findPeaks2DLoG","thresholdFactor","nbPoints","getNbPoints","nbSubSpectra","getNbSubSpectra","isHomonuclear","iSubSpectra","spectrum","getSpectraData","nStdDev","convolutedSpectrum","convoluteWithLoG","peaksMC1","findPeaks2DLoG","peaksMax1","findPeaks2DMax","createSignals2D","inputSpectrum","ftSpectrum","dim","ftFilterData","ir","ic","bitmask","nbDetectedPoints","iStart","peakList","extractArea","cs","rowI","colI","peakListMax","tmpIndex","floor","peakPoints","scanBitmask","nValues","xAverage","yAverage","zSum","maxValue","maxIndex","pt","minmax","newPeak","minX","maxX","minY","bf1","observeFrequencyX","bf2","observeFrequencyY","firstY","getFirstY","dy","getLastY","getDeltaY","arrayPointToUnits","connectivity","tmp","clusters","iCluster","getNucleus","getLastX","getFirstX","peaks2D","sumZ","jPeak","newESD","ESD2","nmrPeakDetection2D","getYData","xType","yType","observeFrequency","indirectFrequency","doublePoint","minMax","getDeltaX","Shape1DNMR","JcampConverter","fetchUrls","nmr","urls","fetching","then","convert","keepSpectra","divLoading","css","getDom","backgroundColor","textAlign","fontSize","border","html","loading","when","apply","arguments","remove","loaded","random","recalculateIntegrals","mode","noLoop","integrals","ratio","sum","ratioSum","text","round","isNaN","setLabelText","updateLabels","integralCreated","integral","nmr1dshapes","selectedSerie","setSerie","getSerie","removeSerie","axis","name","kill","redraw","drawSeries","doNMR","append","makeGraphs1D","defaults","molecule","NMR","minimapClip","registerConstructor","legend","makeLegend","frame","frameWidth","frameColor","movable","setPosition","assignment","assignement","domGraphs","loadDefaults","load","oneD","url","isSymmetric","symmetric","getMode","getGraph2D","getGraphX","getGraphY","resize1DTo","w","h","resize","removeSerieX","setSerieX","removeShapes","integralBasis","serie_x","newSerie","useSlots","setLabel","autoAxis","setData","XIsMonotoneous","lineColor","setLineColor","lineWidth","setLineWidth","setLineStyle","lineStyle","getXAxis","setAxisDataSpacingMax","setAxisDataSpacingMin","getYAxis","setDisplay","primaryGridOff","secondaryGridOff","flip","setTickPosition","autoscaleAxes","draw","label","children","close","right","paddingBottom","paddingTop","paddingLeft","paddingRight","plugins","zoom","zoomMode","shape","strokeColor","fillColor","strokeWidth","locked","resizable","selectable","selectOnMouseDown","handles","labelEditable","horizontal","forcedCoords","getIndex","bindable","labels","color","attributes","data-bindable","onCreatedShape","highlightOnMouseOver","dblclick","plugin","wheel","direction","baseline","pluginAction","ctrl","onBeforeNewShape","setHeight","getType","fl","getLabelText","NMRHandler"],"mappings":"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":"jsnmr.min.js","sourcesContent":["\ndefine( 'src/shape.1dnmr',[ 'jquery', 'jsgraph' ], function( $, Graph ) {\n\n\t\"use strict\";\n\tvar lineHeight = 5;\n\tvar GraphLine = Graph.getConstructor( 'graph.shape.line' );\n\n\tfunction GraphNmrSignal1D( graph, options ) {\n\n\t\tthis.options = options || 2;\n\t\t\n\t}\n\n\t$.extend(GraphNmrSignal1D.prototype, GraphLine.prototype, {\n\t\t\n\t\tcreateDom: function() {\n\t\t\t\n\n\t      this._createHandles( 2, 'rect', {\n\t        transform: \"translate(-3 -3)\",\n\t        width: 6,\n\t        height: 6,\n\t        stroke: \"black\",\n\t        fill: \"white\",\n\t        cursor: 'nwse-resize'\n\t      } );\n\n\t\t\tthis._dom = document.createElementNS(this.graph.ns, 'line');\n\t\t\tthis.maxLines = 64;\n\t\t\tthis.nbLines = 0;\n\n\t\t\tthis.maxLines = 0;\n\n\n\t\t\tthis.lines = new Array(this.maxLines);\n\t\t\t\n\n\t\t\t/*this._createHandles( this.nbHandles, 'rect', { \n\t\t\t\ttransform: \"translate(-3 -3)\", \n\t\t\t\twidth: 6, \n\t\t\t\theight: 6, \n\t\t\t\tstroke: \"black\", \n\t\t\t\tfill: \"white\",\n\t\t\t\tcursor: 'nwse-resize'\n\t\t\t} );*/\n\n\n\t\t\t//I dont know how to remove the previous lines, so, I'll create an array of\n\t\t\t//empty lines that can be filled up by the system.\n\t\t\tfor(var i=this.maxLines-1;i>=0;i--){\n\t\t\t\tthis.lines[i] = document.createElementNS( this.graph.ns, 'line');\n\t\t\t\tthis.group.appendChild( this.lines[i]);\n\t\t\t\tthis.lines[i].setAttribute('stroke', 'green');\n\t\t\t}\n\t\t\t\n\t\t\t// calculate a \"hard\"-threshold as in\n\t\t\t// IEEE Transactions on biomedical engineering, vol. 52, no. 1, january\n\t\t\t// 2005, p. 76-\n\t\t\t// keep the number of standard deviations variable\n\t\t\t//nbStandardDeviations=1;\n\t\t\tvar j,mean=0,std=0,max = 0;\n\t\t\tvar serie = this.graph.series[0].data[0];\n\t\t\t//console.log(serie.length);\n\t\t\tfor(j=0;j<serie.length;j+=2){\n\t\t\t\tif(Math.abs(serie[ j + 1 ])>max)\n\t\t\t\t\tmax = Math.abs(serie[ j + 1 ]);\n\t\t\t}\n\t\t\tfor(j=0;j<serie.length;j+=2){\n\t\t\t\tmean+=serie[ j + 1 ]/max;\n\t\t\t}\n\t\t\tfor(j=0;j<serie.length;j+=2)\n\t\t\t\tstd+=Math.pow(mean-serie[ j + 1 ]/max,2);\n\t\t\tstd=Math.sqrt(max)*Math.sqrt(std*2/serie.length);\n\t\t\tthis.noiseLevel = std*3;//3 is the given number of std for nucleus 1H. For 13C it is 1.\n\t\t\t//console.log(\"noiseLevel \"+this.noiseLevel);\n\t\t\t//this.noiseLevel = 4e6;\n\t\t\t\n\t\t\tthis._dom.element = this;\n\t\t},\n\n\n\t\tredrawImpl: function() {\n\n\t\t\tthis.setHandles();\n\t\t\tthis.redrawLines( lineHeight );\n\t\t\t//this.setBindableToDom( this._dom );\n\t\t},\n\n\n\t\tredrawLines: function( height ) {\n\n\t\t\tif( this.maxLines == 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar peaks = this.findxs();\n\t\t\t//this.lines = [];\n\t\t\tfor(var i=peaks.length-1;i>=0;i--){\n\t\t\t    //TODO How to know the base of the spectrum?????\n\t\t\t    var baseLine = this._getPosition( { x: 10 } );\n\t\t\t\tvar x1 = this._getPosition( { x: peaks[i][0] } );\n\t\t\t\tif( this.lines[i] && x1.x && this.currentPos2y && this.currentPos1y && i<this.maxLines ) {\n\t\t\t\t\tthis.lines[i].setAttribute('stroke', 'green');\n\t\t\t\t\tthis.lines[i].setAttribute('x1', x1.x );\n\t\t\t\t\tthis.lines[i].setAttribute('x2', x1.x );\n\t\t\t\t\tthis.lines[i].setAttribute('y1', x1.y);\n\t\t\t\t\tthis.lines[i].setAttribute('y2', baseLine.y  );\n\t\t\t\t\tthis.lines[i].setAttribute('on', true );\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(var i=peaks.length;i<this.nbLines;i++){\n\n\t\t\t\tif( this.lines[i] ) {\n\t\t\t\t    this.lines[i].setAttribute('y1', parseFloat(this.lines[i].getAttribute('y2')));\n\t\t\t\t    this.lines[i].setAttribute('x1', -1000000 );\n\t\t\t\t\tthis.lines[i].setAttribute('x2', -1000000 );\n\t\t\t\t\tthis.lines[i].setAttribute('on', false );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.nbLines = peaks.length;\n\n\t\t},\n\n\t\thighLigthLinesY: function( height ) {\n\t\t\tfor(var i=this.lines.length-1;i>=0;i--){\n\t\t\t\tif(this.lines[i].getAttribute('on')==\"true\")\n\t\t\t\t\tthis.lines[i].setAttribute('y1', parseFloat(this.lines[i].getAttribute('y1'))-height);\n\t\t\t}\n\t\t},\n\n\n\t\tfindxs: function() {\n\t\t\tvar v1 = this.serie.searchClosestValue( this.getFromData( 'pos' ).x ),\n\t\t\t\tv2 = this.serie.searchClosestValue( this.getFromData( 'pos2' ).x ),\n\t\t\t\tv3,\n\t\t\t\tinit,\n\t\t\t\tmax,\n\t\t\t\tx=[],\n\t\t\t\ty=[];\n\t\t\t\t\n\t\t\tif(! v1 || ! v2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t    \n\t\t\tfor(var i = v1.dataIndex; i <= v2.dataIndex ; i++) {\n\n\t\t\t\tinit = i == v1.dataIndex ? v1.xBeforeIndexArr : 0;\n\t\t\t\tmax = i == v2.dataIndex ? v2.xBeforeIndexArr : this.serie.data[i].length;\n\t\t\t\tk = 0;\n\t\t\t\t\n\t\t\t\tfor(j = init; j <= max; j+=2) {\n\t\t\t\t\tx.push(this.serie.data[ i ][ j + 0 ]);\n\t\t\t\t\ty.push(this.serie.data[ i ][ j + 1 ]);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfor(var i=y.length-1;i>=0;i--)\n  \t\t\t\tif(Math.abs(y[i])<this.noiseLevel)\n    \t\t\t\ty[i]=0;\n\t\t\t\n\t\t\tvar dx = x[1]-x[0];\n\t\t\t// fill convolution frecuency axis\n\t\t\tvar X = []//x[2:(x.length-2)];\n\t\n\t\t\t// fill Savitzky-Golay polynomes\n\t\t\tvar Y = [];\n\t\t\tvar dY = [];\n\t\t\tvar ddY = [];\n\t\t\tfor (var j = 2; j < x.length -2; j++){\n\t\t\t\tY.push((1/35.0)*(-3*y[j-2] + 12*y[j-1] + 17*y[j] + 12*y[j+1] - 3*y[j+2]));\n\t\t\t\tX.push(x[j]);\n\t\t\t\tdY.push((1/(12*dx))*(y[j-2] - 8*y[j-1] + 8*y[j+1] - y[j+2]));\n\t\t\t\tddY.push((1/(7*Math.abs(dx*2)))*(2*y[j-2] - y[j-1] - 2*y[j] - y[j+1] + 2*y[j+2]));\n\t\t\t}\n\t\t\n\t\t\t// pushs max and min points in convolution functions\n\t\t\tvar maxY = [];\n\t\t\tvar stackInt = [];\n\t\t\tvar intervals = [];\n\t\t\tvar minddY = [];\n\t\t\tfor (var i = 1; i < Y.length -1 ; i++)\n\t\t\t{\n\t\t\t\tif ((Y[i] > Y[i-1]) && (Y[i] > Y[i+1]))\n\t\t\t\t{\n\t\t\t\t\tmaxY.push(X[i]);\n\t\t\t\t}\n\t\t\t\tif ((dY[i] < dY[i-1]) && (dY[i] < dY[i+1]))\n\t\t\t\t{\n\t\t\t\t\tstackInt.push(X[i]);\n\t\t\t\t}\n\t\t\t\tif ((dY[i] > dY[i-1]) && (dY[i] > dY[i+1]))\n\t\t\t\t{\n\t\t\t\t\ttry{\n\t\t\t\t\t\tintervals.push( [X[i] , stackInt.pop()] );\n\t\t\t\t\t}\n\t\t\t\t\tcatch(e){\n\t\t\t\t\t\tconsole.log(\"Error I don't know why\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ((ddY[i] < ddY[i-1]) && (ddY[i] < ddY[i+1]))\n\t\t\t\t{\n\t\t\t\t\tminddY.push( [X[i], Y[i]] );\n\t\t\t\t}\n\t\t\t}\n\t\t    //console.log(intervals.length);\n\t\t\t// creates a list with (frecuency, linewith, height)\n\t\t\tvar signals = new Array();\n\t\t\tfor (var j = 0; j < minddY.length; j++)\n\t\t\t{\n\t\t\t\tvar f = minddY[j];\n\t\t\t\tvar frecuency = f[0];\n\t\t\t\tvar possible = new Array();\n\t\t\t\tfor (var k=0;k<intervals.length;k++){\n\t\t\t\t    var i = intervals[k];\n\t\t\t\t\tif (frecuency > i[0] && frecuency < i[1])\n\t\t\t\t\t\tpossible.push(i);\n\t\t\t\t}\n\t\t\t\t//console.log(\"possible \"+possible.length);\n\t\t\t\tif (possible.length > 0)\n\t\t\t\t\tif (possible.length == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar inter = possible[0];\n\t\t\t\t\t\tvar linewith = inter[1] - inter[0];\n\t\t\t\t\t\tvar height = f[1];\n\t\t\t\t\t\tvar points = Y;\n\t\t\t\t\t\t//console.log(frecuency);\n\t\t\t\t\t\tpoints.sort(function(a, b){return a-b});\n\t\t\t\t\t\tif ((linewith > 2*dx) && (height > 0.0001*points[0]))\n\t\t\t\t\t\t\tsignals.push( [frecuency, linewith, height] );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t//TODO: nested peaks\n\t\t\t\t\t//\tconsole.log(possible);\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t//console.log(signals);\n\t\t\treturn signals;\n\t\t}\n\t});\n\n\treturn GraphNmrSignal1D;\n});\n\n","\n/*!\n * jsGraphs JavaScript Graphing Library v@VERSION\n * http://github.com/NPellet/jsGraphs\n *\n * Copyright 2014 Norman Pellet\n * Released under the MIT license\n *\n * Date: @DATE\n */\n\n(function( global, factory ) {\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\t\t\n\t\tmodule.exports = factory( global );\n\t\t\t\n\t} else {\n\n\t\tfactory( global );\n\n\t}\n\n// Pass this if window is not defined yet\n}( ( typeof window !== \"undefined\" ? window : this ), function( window ) {\n\n\t\"use strict\";\n\n\tvar ns = 'http://www.w3.org/2000/svg';\n\n\t\tvar Constructor = function( options ) {\n\n\t\t//\tdomMolecule, domGraphs, domGlobal, moleculeFilter, graphs\n\t\t\tvar self = this;\n\n\t\t\tthis.options = options;\n\t\t\tthis.bindingPairs = [];\n\n\t\t\tvar binding = false,\n\t\t\tbindingA = false,\n\t\t\tbindingB = false,\n\t\t\tbindingLine,\n\t\t\thighlighted = {},\n\t\t\ttargetting,\n\t\t\tstashedLines = [],\n\t\t\tcurrentLines = [],\n\n\t\t\tmousedown = function( el, event, element ) {\n\n\t\t\t\tcheckBindingPairs();\n\n\t\t\t\tif( event.shiftKey ) {\n\n\t\t\t\t\tfor( var i in options.graphs ) { // We need to lock all graphs to prevent actions on the shapes.\n\t\t\t\t\t\toptions.graphs[ i ].lockShapes();\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbinding = true;\n\t\t\t\t\tself[ element ] = el;\n\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t\t// Try to be smart and determine where to put the line ?\n\n\t\t\t\tvar bb = el.getBBox();\n\t\t\t\tvar pos = $( el ).position(),\n\n\t\t\t\tx = pos.left + bb.width / 2,\n\t\t\t\ty = pos.top + bb.height / 2;\n\n\t\t\t\tbindingLine.setAttribute('display', 'block');\n\n\t\t\t\tbindingLine.setAttribute('x1', x );\n\t\t\t\tbindingLine.setAttribute('x2', x );\n\n\t\t\t\tbindingLine.setAttribute('y1', y );\n\t\t\t\tbindingLine.setAttribute('y2', y );\n\n\n\n\t\t\t\ttargetting = otherTarget( element ); \n\t\t\t\tif( options[ otherTarget( element ) ].targettable ) {\n\n\t\t\t\t\tvar targetEls = findTargettableElements( otherTarget( element ) );\n\n\t\t\t\t\ttargetEls.each( function( ) {\n\n\t\t\t\t\t\tif( this.jsGraphIsShape ) {\n\n\t\t\t\t\t\t\tthis.jsGraphIsShape.highlight( options[ otherTarget( element ) ].targettable, \"binding\" );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstoreAttributes( options[ otherTarget( element ) ].targettable, $( this ) );\n\t\t\t\t\t\t\t$( this ).attr( options[ otherTarget( element ) ].targettable );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\totherTarget = function( target ) {\n\n\t\t\t\tif( target == \"jsGraphShape\") {\n\t\t\t\t\treturn \"targetB\";\n\t\t\t\t}\n\n\t\t\t\treturn \"jsGraphShape\";\n\t\t\t},\n\n\t\t\tfindTargettableElements = function( target ) {\n\n\t\t\t\treturn $( options[ target ].dom ).find( options[ target ].bindableFilter );\n\t\t\t},\n\n\n\t\t\tmouseup = function( el, event, target ) {\n\n\t\t\t\tcheckBindingPairs();\n\t\t\t\t\n\n\t\t\t\tif( targetting ) {\n\n\t\t\t\t\tif( options[ targetting ].targettable ) {\n\n\t\t\t\t\t\tvar targetEls = findTargettableElements( targetting );\n\n\t\t\t\t\t\ttargetEls.each( function( ) {\n\n\t\t\t\t\t\t\tif( this.jsGraphIsShape ) {\n\n\t\t\t\t\t\t\t\tthis.jsGraphIsShape.unHighlight( \"binding\" );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\trestoreAttributes( options[ targetting ].targettable, $( this ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\t}\n\n\t\t\t\ttargetting = false;\n\t\t\t\t\n\t\t\t\tif( binding && ! target ) {\n\t\t\t\t\tbindingLine.setAttribute('display', 'none');\n\t\t\t\t\tbinding = false;\n\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif( ! binding ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar domTarget = event.target;\n\t\n\t\t\t\t\n\t\t\t\tbindingLine.setAttribute('display', 'none');\n\n\t\t\t\tif( ! $( domTarget ).is( options[ target ].bindableFilter ) && ! $( domTarget ).get( 0 ).classList.contains( options[ target ].bindableFilterClass ) > -1 ) {\n\n\t\t\t\t\tbinding = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tself[ target ] = event.target;\n\n\n\t\t\t\t\tbinding = false;\n\t\t\t\t\tbindSave();\n\n\t\t\n\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor( var i in options.graphs ) { // We can now unlock everything\n\t\t\t\t\toptions.graphs[ i ].unlockShapes();\t\n\t\t\t\t}\t\t\t\n\t\t\t},\n\n\t\t\tmousemove = function( e ) {\n\n\t\t\t\tcheckBindingPairs();\n\t\t\t\t\n\n\t\t\t\tif( ! binding ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbindingLine.setAttribute('x2', e.clientX + window.scrollX );\n\t\t\t\tbindingLine.setAttribute('y2', e.clientY + window.scrollY );\n\t\t\t},\n\n\t\t\thighlight = function( element, target ) {\n\t\t\t\t\n\t\t\t\tcheckBindingPairs();\n\t\t\t\t\n\t\t\t\tvar elements = [ element ];\n\t\t\t\tif( options[ target ].highlighted ) {\n\t\t\t\t\telements = getEquivalents( target, element );\n\t\t\t\t\thighlightEquivalents( target, elements );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//getEquivalents( target, selector );\n\n\n\t\t\t\tvar eqs = [];\n\t\t\t\t\n//\t\t\t\tunhighlight( element, target );\n\t\t\t\tfor( var i = 0, l = elements.length; i < l; i ++ ) {\n\t\t\t\n\t\t\t\t\tallPairs( highlightPair, elements[ i ], function( pair ) {\n\t\t\t\t\t\teqs = eqs.concat( $.makeArray( getEquivalents( otherTarget( target ), pair[ otherTarget( target ) ] ) ) );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\teqs = $( eqs );\n\t\t\t\t\n\t\t\t\tif( options[ otherTarget( target ) ].highlighted ) {\n\t\t\t\t\thighlightEquivalents( otherTarget( target ), eqs );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t},\n\n\t\t\tunhighlight = function( element, target, force ) {\n\n\t\t\t/*\tif( binding && ! force) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n*/\n\t\t\t\tcheckBindingPairs();\n\t\t\t\tvar elements = getEquivalents( target, element );\n\t\t\t\t\n\t\t\t\tvar eqs = [];\n\n\t\t\t\tfor( var i = 0; i < elements.length; i ++ ) {\n\n\t\t\t\t\tallPairs( unhighlightPair, elements[ i ], function( pair ) {\n\t\t\t\t\t\teqs = eqs.concat( $.makeArray( getEquivalents( otherTarget( target ), pair[ otherTarget( target ) ] ) ) );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\n\t\t\t\thighlighted.jsGraphShape.map( function( el ) {\n\t\t\t\t\tthis.jsGraphIsShape.unHighlight( \"assignmentHighlighted\");\n\t\t\t\t} );\n\n\t\t\t\trestoreAttributes( options.targetB.highlighted, highlighted.targetB );\n\t\t\t\t\n\t\t\t},\n\n\t\t\thighlightEquivalents = function( target, elementsToHighlight ) {\n\n\t\t\t\tvar highlightedAttributes = options[ target ].highlighted;\n\n\t\t\t\tif( elementsToHighlight[ 0 ] && elementsToHighlight[ 0 ].jsGraphIsShape ) {\n\n\t\t\t\t\telementsToHighlight.map( function( el ) {\n\n\t\t\t\t\t\tthis.jsGraphIsShape.highlight( highlightedAttributes, \"assignmentHighlighted\");\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstoreAttributes( highlightedAttributes, elementsToHighlight );\n\t\t\t\t\telementsToHighlight.attr( highlightedAttributes );\n\n\t\t\t\t}\n\n\t\t\t\thighlighted[ target ] = elementsToHighlight;\n\n\t\t\t},\n\n\t\t\tgetEquivalents = function( target, element ) {\n\t\t\t\tvar selector = element.getAttribute( options[ target ].attributeEquivalents );\n\t\t\t\treturn $( options[ target ].dom ).find( \"[\" + options[ target ].attributeEquivalents + \"=\\\"\" + selector + \"\\\"]\");\n\t\t\t},\n\n\t\t\tstoreAttributes = function( attr, els ) {\n\n\t\t\t\tfor( var i in attr ) {\n\t\t\t\t\t\n\n\t\t\t\t\tfor( var j = 0, l = els.length; j < l; j ++ )  {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tif( ! $( els[ j ]  ).data( \"backup-\" + i ) ) {\t\n\t\t\t\t\t\t\t$( els[ j ]  ).data( \"backup-\" + i, $( els[ j ]  ).attr( i ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\trestoreAttributes = function( attr, els ) {\n\n\t\t\t\tfor( var i in attr ) {\n\n\t\t\t\t\tfor( var j = 0, l = els.length; j < l; j ++ )  {\n\n\t\t\t\t\t\t$( els[ j ] ).attr( i, $( els[ j ]  ).data('backup-' + i ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tallPairs = function( fct, element, callback ) {\n\n\t\t\t\tfor( var i = 0, l = self.bindingPairs.length ; i < l ; i ++ ) {\n\n\t\t\t\t\tif( self.bindingPairs[ i ].jsGraphShape == element || self.bindingPairs[ i ].targetB == element ) {\n\n\t\t\t\t\t\tfct( self.bindingPairs[ i ] );\n\n\t\t\t\t\t\tif( callback ) {\n\t\t\t\t\t\t\tcallback( self.bindingPairs[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\thighlightPair = function( pair ) {\n\n\n\t\t\t\tvar posA = $( pair.jsGraphShape ).offset();\n\t\t\t\tvar posB = $( pair.targetB ).offset();\n\n\t\t\t\tvar bbA = $( pair.jsGraphShape )[ 0 ].getBBox();\n\t\t\t\tvar bbB = $( pair.targetB )[ 0 ].getBBox();\n\n\t\t\t\tvar posMain = options.domGlobal.offset();\n\n\t\t\t\tvar line;\n\n\t\t\t\tif( stashedLines.length > 0 ) {\n\t\t\t\t\tline = stashedLines.pop();\n\t\t\t\t\tline.setAttribute('display', 'block');\n\t\t\t\t} else {\n\t\t\t\t\tline = document.createElementNS( ns, 'line');\t\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\tline.setAttribute('stroke', 'black');\n\t\t\t\tline.setAttribute('x1', posA.left - posMain.left + bbA.width / 2 );\n\t\t\t\tline.setAttribute('y1', posA.top - posMain.top + bbA.height / 2  );\n\t\t\t\tline.setAttribute('x2', posB.left - posMain.left + bbB.width / 2 );\n\t\t\t\tline.setAttribute('y2', posB.top - posMain.top + bbB.height / 2 );\n\n\t\t\t\tpair.line = line;\n\t\t\t\tcurrentLines.push( line );\n\n\t\t\t\ttopSVG.appendChild( line );\n\t\t\t},\n\n\n\t\t\tunhighlightPair = function( pair ) {\n\n\t\t\t\tpair.line = false;\n\n\t\t\t\tcurrentLines.map( function( line ) {\n\n\t\t\t\t\tline.setAttribute('display', 'none');\n\n\t\t\t\t} );\n\n\t\t\t\tstashedLines = stashedLines.concat( currentLines );\n\t\t\t\tcurrentLines = [];\n\t\n\t\t\t\t\n\t\t\t},\n\n\t\t\tbindSave = function() {\n\n\t\t\t\tvar pair;\n\t\t\t\tif( pair = lookForPair( self.jsGraphShape, self.targetB ) ) {\n\t\t\t\t\tremovePair( pair );\n\t\t\t\t\tunhighlightPair( pair );\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tunhighlight( self.jsGraphShape, \"jsGraphShape\", true );\n\n\t\t\t\tself.bindingPairs.push( { jsGraphShape: self.jsGraphShape, targetB: self.targetB } );\n\n\t\t\t\tself.jsGraphShape.jsGraphIsShape.setStrokeDasharray(\"5,5\");\n\t\t\t\tself.jsGraphShape.jsGraphIsShape.applyStyle();\n\t\t\t\n\t\t\t\tbindingA = null;\n\t\t\t\tbindingB = null;\n\n\t\t\t\tconsole.log( self.getAssignment() );\n\n\n\t\t\t},\n\n\t\t\tremovePair = function( pair ) {\n\t\t\t\tself.bindingPairs.splice( self.bindingPairs.indexOf( pair ), 1 );\n\t\t\t},\n\n\t\t\tlookForPair = function( A, B ) {\n\n\t\t\t\tself.bindingPairs.map( function( pair ) {\n\n\t\t\t\t\tif( pair.jsGraphShape == A || pair.targetB == B ) {\n\t\t\t\t\t\treturn pair;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\tcheckBindingPairs = function() {\n\n\t\t\t\tfor( var i = 0, l = self.bindingPairs.length ; i < l ; i ++ ) {\n\n\t\t\t\t\tif( $( options.jsGraphShape.dom ).get( 0 ).contains( self.bindingPairs[ i ].jsGraphShape ) && $( options.targetB.dom ).get( 0 ).contains( self.bindingPairs[ i ].targetB ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tself.bindingPairs[ i ] = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tsetEvents = function( ) {\n\n\t\t\t\toptions.jsGraphShape.dom.on('mousedown', options.jsGraphShape.bindableFilter, function( e ) {\n\t\t\t\t\t\n\t\t\t\t\tmousedown( this, e, \"jsGraphShape\" );\n\t\t\t\t});\n\n\t\t\t\toptions.jsGraphShape.dom.on('mouseover', options.jsGraphShape.bindableFilter, function( e ) {\n\t\t\t\t\t\n\t\t\t\t\thighlight( this, \"jsGraphShape\" );\n\t\t\t\t});\n\n\t\t\t\toptions.jsGraphShape.dom.on('mouseout', options.jsGraphShape.bindableFilter, function( e ) {\n\t\t\t\t\tunhighlight( this, \"jsGraphShape\" );\n\t\t\t\t});\n\n\t\t\t\toptions.targetB.dom.on('mousedown', options.targetB.bindableFilter, function( e ) {\n\t\t\t\t\tmousedown( this, e, \"targetB\" );\n\t\t\t\t});\n\n\t\t\t\toptions.targetB.dom.on('mouseover', options.targetB.bindableFilter, function( e ) {\n\t\t\t\t\thighlight( this, \"targetB\" );\n\t\t\t\t});\n\n\t\t\t\toptions.targetB.dom.on('mouseout', options.targetB.bindableFilter, function( e ) {\n\t\t\t\t\tunhighlight( this, \"targetB\" );\n\t\t\t\t});\n\n\t\t\t\toptions.jsGraphShape.dom.on('mouseup', function( e ) {\n\t\t\t\t\tmouseup( this, e, \"jsGraphShape\" );\n\t\t\t\t});\n\n\t\t\t\toptions.targetB.dom.on('mouseup', function( e ) {\n\t\t\t\t\tmouseup( this, e, \"targetB\" );\n\t\t\t\t});\n\n\t\t\t\toptions.domGlobal.on('mouseup', function( e ) {\n\t\t\t\t\tmouseup( this, e, false );\n\t\t\t\t})\n\n\t\t\t\toptions.domGlobal.on('mousemove', function( e ) {\n\t\t\t\t\tmousemove( e );\n\t\t\t\t})\n\t\t\t};\n\n\n\t\t\tvar topSVG = document.createElementNS( ns, 'svg' );\n\t\t\ttopSVG.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n\t\t\ttopSVG.setAttribute('xmlns', ns );\n\t\t\n\t\t\ttopSVG.setAttribute('style', 'position: absolute');\n\t\t\ttopSVG.setAttribute('width', options.domGlobal.width( ) )\n\t\t\ttopSVG.setAttribute('height', options.domGlobal.height( ) )\n\t\t\ttopSVG.setAttribute('pointer-events', 'none');\n\n\t\t\tbindingLine = document.createElementNS( ns, 'line');\n\t\t\tbindingLine.setAttribute('stroke', 'black');\n\n\t\t\ttopSVG.appendChild( bindingLine );\n\n\t\t\toptions.domGlobal.prepend( topSVG );\n\t\t\tsetEvents( );\t\n\t};\n\n\tConstructor.prototype.getAssignment = function() {\n\n\t\tvar self = this;\n\n\t\treturn this.bindingPairs.map( function( pair ) {\n\n\t\t\tif( ! pair ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tvar attrA = pair.jsGraphShape.getAttribute( self.options.jsGraphShape.attributeEquivalents );\n\t\t\tvar attrB = pair.targetB.getAttribute( self.options.targetB.attributeEquivalents );\n\n\t\t\treturn [ attrA, attrB ];\n\t\t} );\n\t}\n\n\n\tConstructor.prototype.findElement = function( target, selector ) {\n\n\t\treturn $( this.options[ target ].dom ).find( \"[\" + this.options[ target ].attributeEquivalents + \"=\\\"\" + selector + \"\\\"]\");\t\n\t};\n\n\n\tConstructor.prototype.setAssignment = function( pairs ) {\n\n\t\tvar self = this;\n\t\tself.bindingPairs = [];\n\n\t\tpairs.forEach( function( pair ) {\n\n\t\t\tself.bindingPairs.push( { jsGraphShape: self.findElement( 'jsGraphShape', pair[ 0 ] ), targetB: self.findElement( 'targetB', pair[ 1 ] ) } );\n\n\t\t} );\n\t}\n\n\n\tvar Assignment = function( $ ) {\n\t\treturn Constructor;\n\t};\n\n\tif( typeof define === \"function\" && define.amd ) {\n\t\tdefine( 'src/assignment',[ 'jquery' ], function( $ ) {\n\t\t\treturn Assignment( $ );\n\t\t});\n\t} else if( window ) {\n\n\t\tif( ! window.jQuery ) {\n\t\t\tthrow \"jQuery has not been loaded. Abort assignment initialization.\"\n\t\t\treturn;\n\t\t}\n\n\t\twindow.Assignment = Assignment( window.jQuery );\n\t}\n}));\n\n","var SD={\n\t  /**\n\t  * @function create(spectra)\n\t  * This function define a spectraData from the x and y vectors. If the spectraData is null it will return a new instance of\n\t  * SpectraData\n\t  * @param\tspectra:+Object\n\t  * @returns\t+SD\n\t  */\n\t create: function(spectra){\n\t\t return new ESD(spectra);\n\t }\n};\n\nvar HeteroNuclearPeakOptimizer={\n\ttoleranceX : 0.025,\n\ttoleranceY : 0.5,\n\tclean: function(peaks, threshold){\n\t\tvar max = Number.NEGATIVE_INFINITY;\n\t\tvar i,peak;\n\t\t//double min = Double.MAX_VALUE;\n\t\tfor(i=peaks.length-1;i>=0;i--){\n\t\t\tif(Math.abs(peaks[i].z)>max)\n\t\t\t\tmax=Math.abs(peaks[i].z);\n\t\t}\n\t\tmax*=threshold;\n\t\tfor(i=peaks.length-1;i>=0;i--){\n\t\t\tif(Math.abs(peaks[i].z)<max)\n\t\t\t\tpeaks.splice(i,1);\n\t\t}\n\t\treturn peaks;\n\t}\n}\n\nvar HomoNuclearPeakOptimizer={\n\tdiagonalError:0.05,\n\ttolerance:0.05,\n\tDEBUG:false,\n\t\n\tenhanceSymmetry: function(signals){\n\t\t\n\t\tvar properties = this.initializeProperties(signals);\n\t\tvar output = signals;\n\n\t\tif(this.DEBUG)\n\t\t\tconsole.log(\"Before optimization size: \"+output.size());\n\t\t\n\t\t//First step of the optimization: Symmetry validation\n\t\tvar i,hits,index;\n\t\tvar signal;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tsignal = output[i];\n\t\t\tif(signal.peaks.length>1)\n\t\t\t\tproperties[i][1]++;\n\t\t\tif(properties[i][0]==1){\n\t\t\t\tindex = this.exist(output, properties, signal,-1,true);\n\t\t\t\tif(index>=0){\n\t\t\t\t\tproperties[i][1]+=2;\n\t\t\t\t\tproperties[index][1]+=2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Second step of the optimization: Diagonal image existence\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tsignal = output[i];\n\t\t\tif(properties[i][0]==0){\n\t\t\t\thits = this.checkCrossPeaks(output, properties, signal, true);\n\t\t\t\tproperties[i][1]+=hits;\n\t\t\t\t//checkCrossPeaks(output, properties, signal, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Now, each peak have a score between 0 and 4, we can complete the patterns which\n\t\t//contains peaks with high scores, and finally, we can remove peaks with scores 0 and 1\n\t\tvar count = 0;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tif(properties[i][0]!=0&&properties[i][1]>2){\n\t\t\t\tcount++;\n\t\t\t\tcount+=this.completeMissingIfNeeded(output,properties,output[i],properties[i]);\n\t\t\t}\n\t\t\tif(properties[i][1]>=2&&properties[i][0]==0)\n\t\t\t\tcount++;\n\t\t}\n\t\t\n\t\tif(this.DEBUG)\n\t\t\tconsole.log(\"After optimization size: \"+count);\n\t\tvar  toReturn = new Array(count);\n\t\tcount--;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tif(properties[i][0]!=0&&properties[i][1]>2\n\t\t\t\t\t||properties[i][0]==0&&properties[i][1]>1){\n\t\t\t\ttoReturn[count--]=output[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconsole.log(\"Removed \"+i+\" \"+output[i].peaks.length);\n\t\t\t}\n\t\t\t//if(properties.get(i)[1]>=2)\n\t\t\t//\ttoReturn[count--]=output.get(i);\n\t\t}\n\t\treturn toReturn;\n\t},\n\t\n\tcompleteMissingIfNeeded: function(output, properties, thisSignal, thisProp) {\n\t\t//Check for symmetry\n\t\tvar index = this.exist(output, properties, thisSignal,-thisProp[0],true);\n\t\tvar addedPeaks=0;\n\t\tif(index<0){//If this signal have no a symmetry image, we have to include it\n\t\t\tvar newSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftX,z:1}];\n\t\t\toutput.push(newSignal);\n\t\t\tvar tmpProp = [-thisProp[0],thisProp[1]];\n\t\t\tproperties.push(tmpProp);\n\t\t\taddedPeaks++;\n\t\t}\n\t\t//Check for diagonal peaks\n\t\tvar j=0;\n\t\tvar diagX=false, diagY=false;\n\t\tvar signal;\n\t\tfor(j=output.length-1;j>=0;j--){\n\t\t\tsignal = output[j];\n\t\t\tif(properties[j][0]==0){\n\t\t\t\tif(Math.abs(signal.shiftX-thisSignal.shiftX)<this.diagonalError)\n\t\t\t\t\tdiagX=true;\n\t\t\t\tif(Math.abs(signal.shiftY-thisSignal.shiftY)<this.diagonalError)\n\t\t\t\t\tdiagY=true;\n\t\t\t}\n\t\t}\n\t\tif(diagX==false){\n\t\t\tvar newSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\tnewSignal.shiftX=thisSignal.shiftX;\n\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\tnewSignal.peaks = [{x:thisSignal.shiftX,y:thisSignal.shiftX,z:1}];\n\t\t\toutput.push(newSignal);\n\t\t\tvar tmpProp = [0,thisProp[1]];\n\t\t\tproperties.push(tmpProp);\n\t\t\taddedPeaks++;\n\t\t}\n\t\tif(diagY==false){\n\t\t\tvar newSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\tnewSignal.shiftY=thisSignal.shiftY;\n\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftY,z:1}];\n\t\t\toutput.push(newSignal);\n\t\t\tvar tmpProp = [0,thisProp[1]];\n\t\t\tproperties.push(tmpProp);\n\t\t\taddedPeaks++;\n\t\t}\n\t\treturn addedPeaks;\n\t\t\n\t},\n\t\n\t//Check for any diagonal peak that match this cross peak\n\tcheckCrossPeaks: function(output, properties, signal, updateProperties) {\n\t\tvar hits = 0, i=0, shift=signal.shiftX*4;\n\t\tvar crossPeaksX = [],crossPeaksY = [];\n\t\tvar cross,i;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tcross = output[i];\n\t\t\tif(properties[i][0]!=0){\n\t\t\t\tif(Math.abs(cross.shiftX-signal.shiftX)<this.diagonalError){\n\t\t\t\t\thits++;\n\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\tcrossPeaksX.push(i);\n\t\t\t\t\tshift+=cross.shiftX;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(Math.abs(cross.shiftY-signal.shiftY)<this.diagonalError){\n\t\t\t\t\t\thits++;\n\t\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\t\tcrossPeaksY.push(i);\n\t\t\t\t\t\tshift+=cross.shiftY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Update found crossPeaks and diagonal peak\n\t\tshift/=(crossPeaksX.length+crossPeaksY.length+4);\n\t\tif(crossPeaksX.length>0){\n\t\t\tfor(var i=crossPeaksX.length-1;i>=0;i--){\n\t\t\t\toutput[crossPeaksX[i]].shiftX=shift;\n\t\t\t}\n\t\t}\n\t\tif(crossPeaksY.length>0){\n\t\t\tfor(var i=crossPeaksY.length-1;i>=0;i--){\n\t\t\t\toutput[crossPeaksY[i]].shiftY=shift;\n\t\t\t}\n\t\t}\n\t\tsignal.shiftX=shift;\n\t\tsignal.shiftY=shift;\n\t\treturn hits;\n\t},\n\n\texist: function(output, properties, signal, type, symmetricSearch) {\n\t\tfor(var i=output.length-1;i>=0;i--){\n\t\t\tif(properties[i][0]==type){\n\t\t\t\tif(this.distanceTo(signal, output[i], symmetricSearch)<this.tolerance){\n\t\t\t\t\tif(!symmetricSearch){\n\t\t\t\t\t\tvar shiftX=(output[i].shiftX+signal.shiftX)/2.0;\n\t\t\t\t\t\tvar shiftY=(output[i].shiftY+signal.shiftY)/2.0;\n\t\t\t\t\t\toutput[i].shiftX=shiftX;\n\t\t\t\t\t\toutput[i].shiftY=shiftY;\n\t\t\t\t\t\tsignal.shiftX=shiftX;\n\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tvar shiftX=signal.shiftX;\n\t\t\t\t\t\tvar shiftY=output[i].shiftX;\n\t\t\t\t\t\toutput[i].shiftY=shiftX;\n\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t}\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\t/**\n\t * We try to determine the position of each signal within the spectrum matrix.\n\t * Peaks could be of 3 types: upper diagonal, diagonal or under diagonal 1,0,-1\n\t * respectively.\n\t * @param Signals\n\t * @return A matrix containing the properties of each signal\n\t */\n\tinitializeProperties: function(signals){\n\t\tvar signalsProperties = new Array(signals.length);\n\t\tfor(var i=signals.length-1;i>=0;i--){\n\t\t\tsignalsProperties[i]=[0,0];\n\t\t\t//We check if it is a diagonal peak\n\t\t\tif(Math.abs(signals[i].shiftX-signals[i].shiftY)<=this.diagonalError){\n\t\t\t\tsignalsProperties[i][1]=1;\n\t\t\t\t//We adjust the x and y value to be symmetric.\n\t\t\t\t//In general chemical shift in the direct dimension is better than in the other one,\n\t\t\t\t//so, we believe more to the shiftX than to the shiftY.\n\t\t\t\tvar shift = (signals[i].shiftX*2+signals[i].shiftY)/3.0;\n\t\t\t\tsignals[i].shiftX=shift;\n\t\t\t\tsignals[i].shiftY=shift;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(signals[i].shiftX-signals[i].shiftY>0)\n\t\t\t\t\tsignalsProperties[i][0]=1;\n\t\t\t\telse\n\t\t\t\t\tsignalsProperties[i][0]=-1;\n\t\t\t}\n\t\t}\n\t\treturn signalsProperties;\n\t},\n\t\n\t/**\n\t * This function calculates the distance between 2 nmr signals . If toImage is true, \n\t * it will interchange x by y in the distance calculation for the second signal.\n\t */\n\tdistanceTo: function(a, b, toImage){\n\t\tif(!toImage){\n\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftX, 2)\n\t\t\t\t\t+Math.pow(a.shiftY-b.shiftY, 2));\n\t\t}\n\t\telse{\n\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftY, 2)\n\t\t\t\t\t+Math.pow(a.shiftY-b.shiftX, 2));\n\t\t}\n\t}\n};\n\nvar SimpleClustering={\n\n\t/*This function returns the cluster list given a connectivity matrix.\n\t*To improve the performance, the connectivity(square and symmetric) matrix \n\t*is given as a single vector containing  the upper diagonal of the matrix\n\t*Note: This algorithm is O(n*n) complexity. I wonder if there is something better. \n\t*acastillo\n\t*/\n\tfullClusterGenerator:function(conn){\n\t\tvar nRows = Math.sqrt(conn.length*2+0.25)-0.5;\n\t\t//console.log(\"nRows: \"+nRows+\" - \"+conn.length);\n\t\tvar clusterList = [];\n\t\tvar available = new Array(nRows);\n\t\tvar remaining = nRows;\n\t\tvar cluster = [];\n\t\t//Mark all the elements as available\n\t\tfor(var i=nRows-1;i>=0;i--){\n\t\t\tavailable[i]=1;\n\t\t}\n\t\tvar nextAv=-1,i;\n\t\tvar toInclude = [];\n\t\twhile(remaining>0){\n\t\t\tif(toInclude.length==0){\n\t\t\t\t//If there is no more elements to include, start a new cluster\n\t\t\t\tcluster = new Array(nRows);\n\t\t\t\tfor(i=nRows-1;i>=0;i--)\n\t\t\t\t\tcluster[i]=0;\n\t\t\t\tclusterList.push(cluster);\n\t\t    \tfor(nextAv = nRows-1;available[nextAv]==0;nextAv--){};\n\t\t    }\n\t\t    else{\n\t\t    \tnextAv=toInclude.splice(0,1);\n\t\t    }\n\t\t    //console.log(\"row: \"+nextAv);\n\t\t    cluster[nextAv]=1;\n\t\t    available[nextAv]=0;\n\t\t    remaining--;\n\t\t    //Copy the next available row\n\t\t    var row = new Array(nRows);\n\t\t\tfor(i=nRows-1;i>=0;i--){\n\t\t\t\tvar c=Math.max(nextAv,i);\n\t\t\t\tvar r=Math.min(nextAv,i);\n\t\t\t\t//The element in the conn matrix\n\t\t\t\t//console.log(\"index: \"+r*(2*nRows-r-1)/2+c)\n\t\t\t\trow[i]=conn[r*(2*nRows-r-1)/2+c];\n\t\t\t\t//console.log(\"col: \"+i+\":\"+row[i]);\n\t\t\t\t//There is new elements to include in this row?\n\t\t\t\t//Then, include it to the current cluster\n\t\t\t\tif(row[i]==1&&available[i]==1&&cluster[i]==0){\n\t\t\t\t\ttoInclude.push(i);\n\t\t\t\t\tcluster[i]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn clusterList;\n\t}\n}\n\nvar MathUtils={\n\t/**\n\t * Returns the minimum and maximum values of the given vector\n\t * @param data\n\t * @return double array containing [min,max]\n\t */\n\tgetMinMax: function( data) {\n\t\tvar result = [Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY];\n\n\t\tfor (var i = data.length-1; i >=0 ; i--) {\n\t\t\tif (data[i] < result[0])\n\t\t\t\tresult[0] = data[i];\n\t\t\tif (data[i] > result[1])\n\t\t\t\tresult[1] = data[i];\n\t\t}\n\t\treturn result;\n\t}\n};\n\nvar FFTUtils = {\n\n/**\n\t * Calculates the inverse of a 2D Fourier transform\n\t * \n\t * @param ft\n\t * @param ftRows\n\t * @param ftCols\n\t * @return\n\t */\n\tifft2DArray: function(ft, ftRows, ftCols) {\n\t\tvar tempTransform = new Array(ftRows * ftCols);\n\t\tvar nRows = ftRows / 2;\n\t\tvar nCols = (ftCols - 1) * 2;\n\t\t// reverse transform columns\n\t\tFFT.init(nRows);\n\t\tvar tmpCols = {re:new Array(nRows),im:new Array(nRows)};\n\t\tfor (var iCol = 0; iCol < ftCols; iCol++) {\n\t\t\tfor (var iRow = nRows-1; iRow >=0; iRow--) {\n\t\t\t\ttmpCols.re[iRow] = ft[(iRow * 2) * ftCols + iCol];\n\t\t\t\ttmpCols.im[iRow] = ft[(iRow * 2 + 1) * ftCols + iCol];\n\t\t\t}\n\t\t\t//Unnormalized inverse transform\n\t\t\tFFT.bt(tmpCols.re, tmpCols.im);\n\t\t\tfor (var iRow = nRows-1; iRow >=0; iRow--) {\n\t\t\t\ttempTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n\t\t\t\ttempTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n\t\t\t}\n\t\t}\n\n\t\t// reverse row transform\n\t\tvar finalTransform = new Array(nRows * nCols);\n\t\tFFT.init(nCols);\n\t\tvar tmpRows = {re:new Array(nCols),im:new Array(nCols)};\n\t\tvar scale = nCols * nRows;\n\t\tfor (var iRow = 0; iRow < ftRows; iRow += 2) {\n\t\t\ttmpRows.re[0] = tempTransform[iRow * ftCols];\n\t\t\ttmpRows.im[0] = tempTransform[(iRow + 1) * ftCols];\n\t\t\tfor (var iCol = 1; iCol < ftCols; iCol++) {\n\t\t\t\ttmpRows.re[iCol] = tempTransform[iRow * ftCols + iCol];\n\t\t\t\ttmpRows.im[iCol] = tempTransform[(iRow + 1) * ftCols + iCol];\n\t\t\t\ttmpRows.re[nCols - iCol] = tempTransform[iRow * ftCols + iCol];\n\t\t\t\ttmpRows.im[nCols - iCol] = -tempTransform[(iRow + 1) * ftCols + iCol];\n\t\t\t}\n\t\t\t//Unnormalized inverse transform\n\t\t\tFFT.bt(tmpRows.re, tmpRows.im);\n\t\t\t\n\t\t\tvar indexB = (iRow / 2) * nCols;\n\t\t\tfor (var iCol = nCols-1; iCol >=0; iCol--) {\n\t\t\t\tfinalTransform[indexB + iCol] = tmpRows.re[iCol]/ scale;\n\t\t\t}\n\t\t}\n\t\treturn finalTransform;\n\t},\n    /**\n\t * Calculates the fourier transform of a matrix of size (nRows,nCols) It is\n\t * assumed that both nRows and nCols are a power of two\n\t * \n\t * On exit the matrix has dimensions (nRows * 2, nCols / 2 + 1) where the\n\t * even rows contain the real part and the odd rows the imaginary part of the\n\t * transform\n\t * @param data\n\t * @param nRows\n\t * @param nCols\n\t * @return\n\t */\n    fft2DArray:function(data, nRows, nCols){\n    \tvar ftCols = (nCols / 2 + 1);\n\t\tvar ftRows = nRows * 2;\n\t\tvar tempTransform = new Array(ftRows * ftCols);\n\t\tFFT.init(nCols);\n\t\t// transform rows\n\t\tvar tmpRows = {re:new Array(nCols),im:new Array(nCols)};\n\t\tvar row1 = {re:new Array(nCols),im:new Array(nCols)}\n\t\tvar row2 = {re:new Array(nCols),im:new Array(nCols)}\n\t\tvar index,iRow0, iRow1, iRow2, iRow3;\n\t\tfor (var iRow = 0; iRow < nRows / 2; iRow++) {\n\t\t    index = (iRow * 2) * nCols;\n\t\t\ttmpRows.re = data.slice(index, index+nCols);\n\t\t\t\n\t\t\tindex = (iRow * 2 + 1) * nCols;\n\t\t\ttmpRows.im = data.slice(index,index+nCols);\n\t\t\t\n\t\t\tFFT.fft1d(tmpRows.re, tmpRows.im);\n\t\t\t\n\t\t\t/*if(iRow==0){\n\t\t\t\tconsole.log(tmpRows.re);\n\t\t\t\tconsole.log(tmpRows.im);\n\t\t\t}*/\n\t\t\tthis.reconstructTwoRealFFT(tmpRows, row1, row2);\n\t\t\t//Now lets put back the result into the output array\n\t\t\tiRow0=(iRow * 4) * ftCols;\n\t\t\tiRow1=(iRow * 4+1) * ftCols;\n\t\t\tiRow2=(iRow * 4+2) * ftCols;\n\t\t\tiRow3=(iRow * 4+3) * ftCols;\n\t\t\tfor(var k=ftCols-1;k>=0;k--){\n\t\t\t\ttempTransform[iRow0+k]=row1.re[k];\n\t\t\t\ttempTransform[iRow1+k]=row1.im[k];\n\t\t\t\ttempTransform[iRow2+k]=row2.re[k];\n\t\t\t\ttempTransform[iRow3+k]=row2.im[k];\n\t\t\t}\n\t\t}\n\t\t\n\t\t//console.log(tempTransform);\n\t\trow1 = null;\n\t\trow2 = null;\n\t\t// transform columns\n\t\tvar finalTransform = new Array(ftRows * ftCols);\n\t\tFFT.init(nRows);\n\t\tvar tmpCols = {re:new Array(nRows),im:new Array(nRows)};\n\t\tfor (var iCol = ftCols-1; iCol >= 0; iCol--) {\n\t\t\tfor (var iRow = nRows-1; iRow >=0; iRow--) {\n\t\t\t\ttmpCols.re[iRow] = tempTransform[(iRow * 2) * ftCols + iCol];\n\t\t\t\ttmpCols.im[iRow] = tempTransform[(iRow * 2 + 1) * ftCols + iCol];\n\t\t\t}\n\t\t\tFFT.fft1d(tmpCols.re, tmpCols.im);\n\t\t\tfor (var iRow = nRows-1; iRow >=0; iRow--) {\n\t\t\t\tfinalTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n\t\t\t\tfinalTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n\t\t\t}\n\t\t}\n\t\t\n\t\t//console.log(finalTransform);\n\t\treturn finalTransform;\n    \n    },\n     /**\n\t * \n\t * @param fourierTransform\n\t * @param realTransform1\n\t * @param realTransform2\n\t * \n\t * Reconstructs the individual Fourier transforms of two simultaneously\n\t * transformed series. Based on the Symmetry relationships (the asterisk\n\t * denotes the complex conjugate)\n\t * \n\t * F_{N-n} = F_n^{*} for a purely real f transformed to F\n\t * \n\t * G_{N-n} = G_n^{*} for a purely imaginary g transformed to G\n\t * \n\t */\n\treconstructTwoRealFFT:function(fourierTransform, realTransform1, realTransform2) {\n\t\tvar length = fourierTransform.re.length;\n\t\t// allocate storage\n\t\t/*realTransform1.re = new Array(length);\n\t\trealTransform1.im = new Array(length);\n\t\trealTransform2.re = new Array(length);\n\t\trealTransform2.im = new Array(length);*/\n\n\t\t// the components n=0 are trivial\n\t\trealTransform1.re[0] = fourierTransform.re[0];\n\t\trealTransform1.im[0] = 0.0;\n\t\trealTransform2.re[0] = fourierTransform.im[0];\n\t\trealTransform2.im[0] = 0.0;\n\t\tvar rm, rp, im, ip, j;\n\t\tfor (var i = length / 2; i >0 ; i--) {\n\t\t\tj = length - i;\n\t\t\trm = 0.5 * (fourierTransform.re[i] - fourierTransform.re[j]);\n\t\t\trp = 0.5 * (fourierTransform.re[i] + fourierTransform.re[j]);\n\t\t\tim = 0.5 * (fourierTransform.im[i] - fourierTransform.im[j]);\n\t\t\tip = 0.5 * (fourierTransform.im[i] + fourierTransform.im[j]);\n\t\t\trealTransform1.re[i] = rp;\n\t\t\trealTransform1.im[i] = im;\n\t\t\trealTransform1.re[j] = rp;\n\t\t\trealTransform1.im[j] = -im;\n\t\t\trealTransform2.re[i] = ip;\n\t\t\trealTransform2.im[i] = -rm;\n\t\t\trealTransform2.re[j] = ip;\n\t\t\trealTransform2.im[j] = rm;\n\t\t}\n\t},\n\t\n\t/**\n\t * In place version of convolute 2D\n\t * \n\t * @param ftSignal\n\t * @param ftFilter\n\t * @param ftRows\n\t * @param ftCols\n\t * @return\n\t */\n\tconvolute2DI:function(ftSignal, ftFilter, ftRows, ftCols) {\n\t\tvar re, im;\n\t\tfor (var iRow = 0; iRow < ftRows / 2; iRow++) {\n\t\t\tfor (var iCol = 0; iCol < ftCols; iCol++) {\n\t\t\t\t// \n\t\t\t\tre = ftSignal[(iRow * 2) * ftCols + iCol]\n\t\t\t\t\t\t* ftFilter[(iRow * 2) * ftCols + iCol]\n\t\t\t\t\t\t- ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n\t\t\t\t\t\t* ftFilter[(iRow * 2 + 1) * ftCols + iCol];\n\t\t\t\tim = ftSignal[(iRow * 2) * ftCols + iCol]\n\t\t\t\t\t\t* ftFilter[(iRow * 2 + 1) * ftCols + iCol]\n\t\t\t\t\t\t+ ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n\t\t\t\t\t\t* ftFilter[(iRow * 2) * ftCols + iCol];\n\t\t\t\t// \n\t\t\t\tftSignal[(iRow * 2) * ftCols + iCol] = re;\n\t\t\t\tftSignal[(iRow * 2 + 1) * ftCols + iCol] = im;\n\t\t\t}\n\t\t}\n\t}\t\n};\n\nvar PeakFinders2D = {\n    DEBUG:false,\n    smallFilter: [ \n\t\t\t[ 0, 0, 1, 2, 2, 2, 1, 0, 0 ],\n\t\t\t[ 0, 1, 4, 7, 7, 7, 4, 1, 0 ], \n\t\t\t[ 1, 4, 5, 3, 0, 3, 5, 4, 1 ],\n\t\t\t[ 2, 7, 3, -12, -23, -12, 3, 7, 2 ],\n\t\t\t[ 2, 7, 0, -23, -40, -23, 0, 7, 2 ],\n\t\t\t[ 2, 7, 3, -12, -23, -12, 3, 7, 2 ],\n\t\t\t[ 1, 4, 5, 3, 0, 3, 5, 4, 1 ], \n\t\t\t[ 0, 1, 3, 7, 7, 7, 3, 1, 0 ],\n\t\t\t[ 0, 0, 1, 2, 2, 2, 1, 0, 0 ]],\n\n\t//How noisy is the spectrum depending on the kind of experiment.\n\tgetLoGnStdDevNMR: function(spectraData) {\n\t\tif (spectraData.isHomoNuclear())\n\t\t\treturn 1.5\n\t\telse\n\t\t\treturn 3;\n\t},\n\t\n\t_findPeaks2DLoG: function(spectraData, thresholdFactor){\n\t\tif(thresholdFactor==0)\n\t\t\tthresholdFactor=1;\n\t\tif(thresholdFactor<0)\n\t\t\tthresholdFactor=-thresholdFactor;\n\t\tvar nbPoints = spectraData.getNbPoints();\n\t\tvar nbSubSpectra = spectraData.getNbSubSpectra();\n\t\tvar data = new Array(nbPoints * nbSubSpectra);\n\t\t//var data = new Array(nbPoints * nbSubSpectra/2);\n\t\t\n\t\tvar isHomonuclear = spectraData.isHomoNuclear();\n\t\t\n\t\t//var sum = new Array(nbPoints);\n\t\t\n\t\tfor (var iSubSpectra = 0; iSubSpectra < nbSubSpectra; iSubSpectra++) {\n\t\t\tvar spectrum = spectraData.getSpectraData(iSubSpectra);\n\t\t\tfor (var iCol = 0; iCol < nbPoints; iCol++) {\n\t\t\t\tif(isHomonuclear){\n\t\t\t\t\tdata[iSubSpectra * nbPoints + iCol] =(spectrum[iCol*2+1]>0?spectrum[iCol*2+1]:0);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdata[iSubSpectra * nbPoints + iCol] =Math.abs(spectrum[iCol*2+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar nStdDev = this.getLoGnStdDevNMR(spectraData);\n\t\tif(isHomonuclear){\n\t\t\tvar convolutedSpectrum = this.convoluteWithLoG(data,nbSubSpectra, nbPoints);\n\t\t\tvar peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);//)1.5);\n\t\t\tvar peaksMax1 = this.findPeaks2DMax(data, convolutedSpectrum, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);//2.0);\n\t\t\tfor(var i=0;i<peaksMC1.length;i++)\n\t\t\t\tpeaksMax1.push(peaksMC1[i]);\n\t\t\treturn HomoNuclearPeakOptimizer.enhanceSymmetry(this.createSignals2D(peaksMax1,spectraData,24));\n\t\t\t\n\t\t}\n\t\telse{\n\t\t\tvar convolutedSpectrum = this.convoluteWithLoG(data, nbSubSpectra, nbPoints);\n\t\t\tvar peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);\n\t\t\t//Peak2D[] peaksMC1 = PeakFinders2D.findPeaks2DMax(data, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);\n\t\t\t//Remove peaks with less than 3% of the intensity of the highest peak\t\n\t\t\treturn this.createSignals2D(HeteroNuclearPeakOptimizer.clean(peaksMC1, 0.05), spectraData,24);\n\t\t}\n\t\t\n\t},\n\t/**\n\tCalculates the 1st derivative of the 2D matrix, using the LoG kernel approximation\n\t*/\n\tconvoluteWithLoG:function(inputSpectrum, nRows, nCols){\n\t\tvar ftSpectrum = new Array(nCols * nRows);\n\t\tfor (var i = nRows * nCols-1; i >=0; i--){\n\t\t\tftSpectrum[i] = inputSpectrum[i];\n\t\t}\n\t\t\n\t\tftSpectrum = FFTUtils.fft2DArray(ftSpectrum, nRows, nCols);\n\t\t\n\t\tvar dim = this.smallFilter.length;\n\t\tvar ftFilterData = new Array(nCols * nRows);\n\t\tfor(var i=nCols * nRows-1;i>=0;i--){\n\t\t\tftFilterData[i]=0;\n\t\t}\n\t\t\n\t\tvar iRow, iCol;\n\t\tvar shift = (dim - 1) / 2;\n\t\t//console.log(dim);\n\t\tfor (var ir = 0; ir < dim; ir++) {\n\t\t\tiRow = (ir - shift + nRows) % nRows;\n\t\t\tfor (var ic = 0; ic < dim; ic++) {\n\t\t\t\tiCol = (ic - shift + nCols) % nCols;\n\t\t\t\tftFilterData[iRow * nCols + iCol] = this.smallFilter[ir][ic];\n\t\t\t}\n\t\t}\n\t\t\n\t\tftFilterData = FFTUtils.fft2DArray(ftFilterData, nRows, nCols);\n\n\t\tvar ftRows = nRows * 2;\n\t\tvar ftCols = nCols / 2 + 1;\n\t\tFFTUtils.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);\n\t\t\n\t\treturn  FFTUtils.ifft2DArray(ftSpectrum, ftRows, ftCols);\t\n\t},\n\t/**\n\t\tDetects all the 2D-peaks in the given spectrum based on center of mass logic. \n\t*/\n\tfindPeaks2DLoG:function(inputSpectrum, convolutedSpectrum, nRows, nCols, nStdDev) {\n\t\tvar threshold = 0;\n\t\tfor(var i=nCols*nRows-2;i>=0;i--)\n\t\t\tthreshold+=Math.pow(convolutedSpectrum[i]-convolutedSpectrum[i+1],2);\n\t\tthreshold=-Math.sqrt(threshold);\n\t\tthreshold*=nStdDev/nRows;\n\t\t\n\t\tvar bitmask = new Array(nCols * nRows); \n\t\tfor(var i=nCols * nRows-1;i>=0;i--){\n\t\t\tbitmask[i]=0;\n\t\t}\n\t\tvar nbDetectedPoints = 0;\n\t\tvar lasti=-1;\n\t\tfor (var i = convolutedSpectrum.length-1; i >=0 ; i--) {\n\t\t\tif (convolutedSpectrum[i] < threshold) {\n\t\t\t\tbitmask[i] = 1;\n\t\t\t\tnbDetectedPoints++;\n\t\t\t}\n\t\t}\n\t\tvar iStart = 0;\n\t\t//int ranges = 0;\n\t\tvar peakList = [];\n\t\t\n\t\twhile (nbDetectedPoints != 0) {\n\t\t\tfor (iStart; iStart < bitmask.length && bitmask[iStart]==0; iStart++){};\n\t\t\t//\n\t\t\tif (iStart == bitmask.length)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tnbDetectedPoints -= this.extractArea(inputSpectrum, convolutedSpectrum,\n\t\t\t\t\tbitmask, iStart, nRows, nCols, peakList, threshold);\n\t\t}\n\t\t\n\t\tif (peakList.length > 0&&this.DEBUG) {\n\t\t\tconsole.log(\"No peak found\");\n\t\t}\n\t\treturn peakList;\n\t},\n\t/**\n\tDetects all the 2D-peaks in the given spectrum based on the Max logic. \n\t*/\n\tfindPeaks2DMax:function(inputSpectrum, cs, nRows, nCols, nStdDev) {\n\t\tvar threshold = 0;\n\t\tfor(var i=nCols*nRows-2;i>=0;i--)\n\t\t\tthreshold+=Math.pow(cs[i]-cs[i+1],2);\n\t\tthreshold=-Math.sqrt(threshold);\n\t\tthreshold*=nStdDev/nRows;\n\t\t\n\t\tvar rowI,colI;\n\t\tvar peakListMax = [];\n\t\tvar tmpIndex = 0;\n\t\tfor (var i = 0; i < cs.length; i++) {\n\t\t\tif (cs[i] < threshold) {\n\t\t\t\t//It is a peak?\n\t\t\t\trowI=Math.floor(i/nCols);\n\t\t\t\tcolI=i%nCols;\n\t\t\t\t//Verifies if this point is a peak;\n\t\t\t\tif(rowI>0&&rowI+1<nRows&&colI+1<nCols&&colI>0){\n\t\t\t\t\t//It is the minimum in the same row\n\t\t\t\t\tif(cs[i]<cs[i+1]&&cs[i]<cs[i-1]){\n\t\t\t\t\t\t//It is the minimum in the previous row \n\t\t\t\t\t\ttmpIndex=(rowI-1)*nCols+colI;\n\t\t\t\t\t\tif(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n\t\t\t\t\t\t\t//It is the minimum in the next row \n\t\t\t\t\t\t\ttmpIndex=(rowI+1)*nCols+colI;\n\t\t\t\t\t\t\tif(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n\t\t\t\t\t\t\t\tpeakListMax.push({x:colI,y:rowI,z:inputSpectrum[i]});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn peakListMax;\n\t},\n\t/*\n\t\tThis function detects the peaks\n\t*/\n\textractArea:function(spectrum, convolutedSpectrum, bitmask, iStart,\n\t\t\tnRows, nCols, peakList, threshold) {\n\t\tvar iRow = Math.floor(iStart / nCols);\n\t\tvar iCol = iStart % nCols;\n\t\tvar peakPoints =[];\n\t\t//console.log(iStart+\" \"+iRow+\" \"+iCol);\n\t\t// scanBitmask(bitmask, convolutedSpectrum, nRows, nCols, iRow, iCol,\n\t\t// peakPoints);\n\t\tthis.scanBitmask(bitmask, nRows, nCols, iRow, iCol, peakPoints);\n\t\t//console.log(\"extractArea.lng \"+peakPoints.length);\n\t\tvar x = new Array(peakPoints.length);\n\t\tvar y = new Array(peakPoints.length);\n\t\tvar z = new Array(peakPoints.length);\n\t\tvar nValues = peakPoints.length;\n\t\tvar xAverage = 0.0;\n\t\tvar yAverage = 0.0;\n\t\tvar zSum = 0.0;\n\t\tif (nValues >= 9) {\n\t\t\tif (this.DEBUG)\n\t\t\t\tconsole.log(\"nValues=\" + nValues);\n\t\t\tvar maxValue = Number.NEGATIVE_INFINITY;\n\t\t\tvar maxIndex = -1;\n\t\t\tfor (var i = 0; i < nValues; i++) {\n\t\t\t\tvar pt = (peakPoints.splice(0,1))[0];\n\t\t\t\tx[i] = pt[0];\n\t\t\t\ty[i] = pt[1];\n\t\t\t\tz[i] = spectrum[pt[1] * nCols + pt[0]];\n\t\t\t\txAverage += x[i] * z[i];\n\t\t\t\tyAverage += y[i] * z[i];\n\t\t\t\tzSum += z[i];\n\t\t\t\tif (z[i] > maxValue) {\n\t\t\t\t\tmaxValue = z[i];\n\t\t\t\t\tmaxIndex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (maxIndex != -1) {\n\t\t\t\txAverage /= zSum;\n\t\t\t\tyAverage /= zSum;\n\t\t\t\tvar newPeak = {x:xAverage, y:yAverage, z:zSum};\n\t\t\t\tvar minmax;\n\t\t\t\tminmax = MathUtils.getMinMax(x);\n\t\t\t\tnewPeak.minX=minmax[0];\n\t\t\t\tnewPeak.maxX=minmax[1];\n\t\t\t\tminmax = MathUtils.getMinMax(y);\n\t\t\t\tnewPeak.minY=minmax[0];\n\t\t\t\tnewPeak.maxY=minmax[1];\n\t\t\t\tpeakList.push(newPeak);\n\t\t\t}\n\t\t}\n\t\treturn nValues;\n\t},\n\t/*\n\t\tReturn all the peaks(x,y points) that composes a signal.\n\t*/\n\tscanBitmask:function(bitmask, nRows, nCols, iRow, iCol, peakPoints) {\n\t\t//console.log(nRows+\" \"+iRow+\" \"+nCols+\" \"+iCol);\n\t\tif (iRow < 0 || iCol < 0 || iCol == nCols || iRow == nRows)\n\t\t\treturn;\n\t\tif (bitmask[iRow * nCols + iCol]) {\n\t\t\tbitmask[iRow * nCols + iCol] = 0;\n\t\t\tpeakPoints.push([iCol, iRow]);\n\t\t\tthis.scanBitmask(bitmask, nRows, nCols, iRow + 1, iCol, peakPoints);\n\t\t\tthis.scanBitmask(bitmask, nRows, nCols, iRow - 1, iCol, peakPoints);\n\t\t\tthis.scanBitmask(bitmask, nRows, nCols, iRow, iCol + 1, peakPoints);\n\t\t\tthis.scanBitmask(bitmask, nRows, nCols, iRow, iCol - 1, peakPoints);\n\t\t}\n\t},\n\t/**\n\tThis function converts a set of 2D-peaks in 2D-signals. Each signal could be composed \n\tof many 2D-peaks, and it has some additional information related to the NMR spectrum.\n\t*/\n\tcreateSignals2D:function(peaks, spectraData, tolerance){\n\t\t//console.log(peaks.length);\n\t\tvar signals=[];\n\t\tvar nbSubSpectra = spectraData.getNbSubSpectra();\n\t\t\n\t\tvar bf1=spectraData.observeFrequencyX();\n\t\tvar bf2=spectraData.observeFrequencyY();\n\t\t\n\t\tvar firstY = spectraData.getFirstY();\n\t\tvar lastY = spectraData.getLastY();\n\t\tvar dy = spectraData.getDeltaY();\n\t\t\n\t\t//spectraData.setActiveElement(0);\n\t\tvar noValid=0;\n\t\tfor (var i = peaks.length-1; i >=0 ; i--) {\n\t\t    //console.log(peaks[i].x+\" \"+spectraData.arrayPointToUnits(peaks[i].x));\n\t\t    //console.log(peaks[i].y+\" \"+(firstY + dy * (peaks[i].y)));\n\t\t\tpeaks[i].x=(spectraData.arrayPointToUnits(peaks[i].x));\n\t\t\tpeaks[i].y=(firstY + dy * (peaks[i].y));\n\t\t\t//Still having problems to correctly detect peaks on those areas. So I'm removing everything there.\n\t\t\tif(peaks[i].y<-1||peaks[i].y>=210){\n\t\t\t\tpeaks.splice(i,1);\n\t\t\t}\n\t\t}\n\t\t//The connectivity matrix is an square and symmetric matrix, so we'll only store the upper diagonal in an\n\t\t//array like form \n\t\tvar connectivity = [];\n\t\tvar tmp=0;\n\t\ttolerance*=tolerance;\n\t\tfor (var i = 0; i < peaks.length; i++) {\n\t\t\tfor (var j = i; j < peaks.length; j++) {\n\t\t\t\ttmp=Math.pow((peaks[i].x-peaks[j].x)*bf1,2)+Math.pow((peaks[i].y-peaks[j].y)*bf2,2);\n\t\t\t\t//Console.log(peaks[i].getX()+\" \"+peaks[j].getX()+\" \"+tmp);\n\t\t\t\tif(tmp<tolerance){//30*30Hz We cannot distinguish peaks with less than 20 Hz of separation\n\t\t\t\t\tconnectivity.push(1);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tconnectivity.push(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar clusters = SimpleClustering.fullClusterGenerator(connectivity);\n\t\t\n\t\tvar signals = [];\n\t\tif (peaks != null) {\n\t\t\tvar xValue, yValue;\n\t\t\tfor (var iCluster = 0; iCluster < clusters.length; iCluster++) {\n\t\t\t\tsignal={nucleusX:spectraData.getNucleus(1),nucleusY:spectraData.getNucleus(2)};\n\t\t\t\tsignal.resolutionX=( spectraData.getLastX()-spectraData.getFirstX()) / spectraData.getNbPoints();\n\t\t\t\tsignal.resolutionY=dy;\n\t\t\t\tvar peaks2D = [];\n\t\t\t\tsignal.shiftX = 0;\n\t\t\t\tsignal.shiftY = 0;\n\t\t\t\tvar sumZ = 0;\n\t\t\t\tfor(var jPeak = clusters[iCluster].length-1;jPeak>=0;jPeak--){\n\t\t\t\t\tif(clusters[iCluster][jPeak]==1){\n\t\t\t\t\t\tpeaks2D.push(peaks[jPeak]);\n\t\t\t\t\t\tsignal.shiftX+=peaks[jPeak].x*peaks[jPeak].z;\n\t\t\t\t\t\tsignal.shiftY+=peaks[jPeak].y*peaks[jPeak].z;\n\t\t\t\t\t\tsumZ+=peaks[jPeak].z;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsignal.shiftX/=sumZ;\n\t\t\t\tsignal.shiftY/=sumZ;\n\t\t\t\tsignal.peaks = peaks2D;\n\t\t\t\tsignals.push(signal);\n\t\t\t}\n\t\t}\n\t\t//console.log(signals);\t\n\t\treturn signals;\n\t}\n};\n\n/**\n * @object SD.prototype\n * Prototype of ESD objects\n */\nvar ESD = function (newESD) {\n\tthis.ESD2=newESD;\n\t/**\n\t* @function nmrPeakDetection2D(options)\n\t* This function process the given spectraData and tries to determine the NMR signals. Returns an NMRSignal2D array containing all the detected 2D-NMR Signals\n\t* @param\toptions:+Object\t\t\tObject containing the options\n\t* @option\tthresholdFactor:number\tA factor to scale the automatically determined noise threshold.\n\t* @returns\t+Object\tset of NMRSignal2D\n\t*/\n\tthis.nmrPeakDetection2D=function(options){\n\t    options = options||{};\n\t    if(!options.thresholdFactor)\n\t\t\toptions.thresholdFactor=1;\n\t\treturn PeakFinders2D._findPeaks2DLoG(this, options.thresholdFactor);\n\t},\n\t\n\tthis.getNbPoints=function(){\n\t\treturn this.getSpectraData(0).length/2;\n\t},\n\t\n\tthis.getSpectraData=function(i){\n\t\treturn this.ESD2.spectra[i].data[0];\n\t},\n\t\n\tthis.getYData=function(i){\n\t\tvar y = new Array(this.getNbPoints());\n\t\tvar tmp = this.getSpectraData(i);\n\t\tfor(var i=this.getNbPoints()-1;i>=0;i--){\n\t\t\ty[i]=tmp[i*2+1];\n\t\t}\n\t\treturn y;\n\t}\n\tthis.getNbSubSpectra=function(){\n\t\treturn this.ESD2.spectra.length;\n\t},\n\t\n\tthis.isHomoNuclear=function(){\n\t\treturn this.ESD2.xType==this.ESD2.yType;\n\t},\n\t//Returns the observe frequency in the direct dimension\n\tthis.observeFrequencyX=function(){\n\t\treturn this.ESD2.spectra[0].observeFrequency;\n\t},\n\t\n\t//Returns the observe frequency in the indirect dimension\n\tthis.observeFrequencyY=function(){\n\t\treturn this.ESD2.indirectFrequency;\n\t},\n\t//Return the xValue for the given index\n\tthis.arrayPointToUnits=function(doublePoint){\n\t\treturn (this.getFirstX() - (doublePoint* (this.getFirstX() - this.getLastX()) / (this.getNbPoints()-1)));\n\t},\n\t//Return the first value of the direct dimension\n\tthis.getFirstX=function(){\n\t\treturn this.ESD2.minMax.minX;\n\t},\n\t//Return the first value of the direct dimension\n\tthis.getLastX=function(){\n\t\treturn this.ESD2.minMax.maxX;\n\t},\n\t\n\t//Return the first value of the direct dimension\n\tthis.getFirstY=function(){\n\t\treturn this.ESD2.minMax.minY;\n\t},\n\t//Return the first value of the direct dimension\n\tthis.getLastY=function(){\n\t\treturn this.ESD2.minMax.maxY;\n\t},\n\t//Returns the separation between 2 consecutive points in the spectra domain\n\tthis.getDeltaX=function(){\n\t\treturn (this.getLastX()-this.getFirstX()) / (this.getNbPoints()-1);\n\t},\n\t//Returns the separation between 2 consecutive points in the indirect domain\n\tthis.getDeltaY=function(){\n\t\treturn ( this.getLastY()-this.getFirstY()) / (this.getNbSubSpectra()-1);\n\t},\n\t//Return the nucleus of the direct dimension\n\tthis.getNucleus=function(dim){\n\t\tif(dim==1)\n\t\t\treturn this.ESD2.xType;\n\t\tif(dim==2)\n\t\t\treturn this.ESD2.yType;\n\t}\n};\ndefine(\"src/sd\", function(){});\n\n","(function( global, factory ) {\n\n    if ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n        module.exports = factory( global );\n    } else {\n        factory( global );\n    }\n\n} ( window, function( window ) {\n\n\tvar factory = function( Graph, Shape1DNMR, Assignment, JcampConverter ) {\n\n\t\t// Root here\n\t\tvar defaults = {\n\n\t\t\tmode: '1d',\n\t\t\tmolecule: false,\n\t\t\turls: {\n\n\t\t\t}\n\t\t}\n\n\t\tfunction fetchUrls( nmr, urls, options ) {\n\n\t\t\tvar fetching = [];\n\t\t\tfor( var i in urls ) {\n\t\t\t\tfetching.push( $.get( urls[ i ] ).then( function( data ) { return JcampConverter.convert( data, {keepSpectra:true} ) } ) );\n\t\t\t}\n\n\t\t\tif( ! nmr.divLoading ) {\n\n\t\t\t\tnmr.divLoading = $(\"<div />\").css( {\n\n\t\t\t\t\twidth: nmr.getDom().width(),\n\t\t\t\t\theight: nmr.getDom().height(),\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tbackgroundColor: 'rgba(200, 200, 200, 0.5)',\n\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\tlineHeight: nmr.getDom().height() + \"px\",\n\t\t\t\t\tfontSize: '2em',\n\t\t\t\t\tborder: \"1px solid #c0c0c0\"\n\n\t\t\t\t} ).html(\"Loading...\");\n\n\t\t\t\tnmr.getDom().prepend( nmr.divLoading );\n\t\t\t}\n\n\t\t\tnmr.loading = nmr.loading || 0\n\t\t\tnmr.loading++;\n\n\t\t\t$.when.apply( $, fetching ).then( function() {\n\n\t\t\t\tvar j = 0;\n\t\t\t\tfor( i in urls ) {\n\n\t\t\t\t\turls[ i ] = arguments[ j ];\n\t\t\t\t\tj++;\n\t\t\t\t}\n\n\t\t\t\tnmr.loading--;\n\t\t\t\tif( nmr.loading == 0 ) {\n\t\t\t\t\tnmr.divLoading.remove();\n\t\t\t\t\tnmr.divLoading = false;\n\t\t\t\t}\n\n\t\t\t\tnmr.series.push( urls );\n\t\t\t\tnmr.loaded( urls, options, \"a\" + Math.random() );\n\t\t\t} );\n\t\t}\n\n\t\tvar ratio, ratioSum;\n\n\t\tvar integrals = [];\n\n\t\tfunction recalculateIntegrals( nmr, mode, noLoop ) {\n\n\t\t\tvar sumMax = 0;\n\t\t\tvar l = integrals.length;\n\n\n\t\t\tif( l == 1 ) {\n\t\t\t\tratio = 150 / integrals[ 0 ].sum;\n\t\t\t\tratioSum = integrals[ 0 ].sum;\n\t\t\t}\n\n\t\t\tfor( var i = 0; i < l ; i ++ ) {\n\n\t\t\t\tintegrals[ i ].ratio = ratio;\n\n\t\t\t\tvar text = Math.round( integrals[ i ].sum / ratioSum * 100 ) / 100;\n\t\t\t\tif( ! isNaN( text ) ) {\n\t\t\t\t\tintegrals[ i ].setLabelText( text );\n\t\t\t\t}\n\n\t\t\t\t//nmr.integrals[ mode ][ i ].setLabelPosition( {0 );\n\t\t\t\tintegrals[ i ].updateLabels();\n\t\t\t}\n\t\t}\n\n\t\tfunction setSyncPos( nmr, from, to ) {\n\n\t\t\tvar pos1 = from.getFromData( 'pos' ),\n\t\t\t\tpos2 = from.getFromData( 'pos2' );\n\n\t\t\tvar pos1t = to.getFromData( 'pos' ),\n\t\t\t\tpos2t = to.getFromData( 'pos2' );\n\n\t\t\tpos1t.x = pos1.y;\n\t\t\tpos1t.y = pos1.x;\n\n\t\t\tpos2t.x = pos2.y;\n\t\t\tpos2t.y = pos2.x;\n\n\t\t} \n\n\t\tvar nmr1dshapes = [];\n\n\t\tfunction integralCreated( nmr, mode, integral ) {\n\n\t\t\tnmr1dshapes.push( integral );\n\n\t\t\tif( nmr.graphs.selectedSerie ) {\n\t\t\t\tintegral.setSerie( nmr.graphs.selectedSerie );\t\n\t\t\t} else {\n\t\t\t\tintegral.setSerie( nmr.graphs.getSerie( 0 ) );\t\n\t\t\t}\n\t\t/*\t\n\t\t\tvar nmrint = makeNMRIntegral( nmr, mode, integral )\n\t\t\t\tnmrint.setSerie( integral.getSerie() );\n\t\t*/\t\n\t\t\tintegral.integral = integral;\n\t\t\t\n\t\t\t//nmrint.setProp( 'position', integral.getProp( 'position', 0 ), 0 );\n\t\t\t//nmrint.setProp( 'position', integral.getProp( 'position', 1 ), 1 );\n\n\t\t\tintegrals.push( integral );\n\t\t\t//nmrint.originalShape = integral;\n\t\t}\n\n\t\tfunction integralChanged( nmr, mode, peak ) {\n\n\t\t\tif( ! peak.integral ) {\n\t\t\t\treturn;\n\t\t\t}\n/*\n\t\t\tpeak.integral.setPosition();\n\n\t\t\tif( peak.syncTo ) {\n\t\t\t\tsetSyncPos( nmr, peak, peak.syncTo );\n\t\t\t\tpeak.syncTo.redrawImpl();\n\n\t\t\t\tif( peak.syncTo.integral ) {\n\t\t\t\t\tpeak.syncTo.integral.setPosition();\n\t\t\t\t}\n\t\t\t}\n\t\t\n\n\t\t\trecalculateIntegrals( nmr, mode );\n\t\t\t*/\n\t\t}\n\n\n\t\tfunction integralRemoved( nmr, mode, peak ) {\n\n\t\t\tif( peak.integral) {\n\t\t\t\tvar i = peak.integral;\n\t\t\t\tpeak.integral = false;\n\t\t\t\ti.originalShape = false;\n\n\t\t\t\tif( i._inDom ) {\n\t\t\t\t\ti.kill();\n\t\t\t\t}\n\n\t\t\t\tnmr.integrals[ mode ].splice( nmr.integrals[ mode ].indexOf( i ), 1 );\n\n\t\t\t\tnmr1dshapes.splice( nmr1dshapes.indexOf( peak ), 1 );//push( integral );\n\n\t\t\t\tif( nmr1dshapes.length == 1 ) {\n\n\t\t\t\t\tnmr.integralBasis = nmr.integrals[ mode ][ 0 ].lastSum;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trecalculateIntegrals( nmr, mode );\n\t\t}\n\n\t\tfunction getOtherMode( nmr, mode ) {\n\t\t\treturn mode == 'x' ? 'y' : ( mode == 'y' ? 'x' : ( console.error( \"Mode not recognized\") ) );\n\t\t}\n\n\n\t\tfunction makeNMRIntegral( nmr, mode, integral ) {\n\t\t\t// External call\n\t\t\tvar shape = nmr.graphs[ mode ].newShape( { \n\t\t\t\t\ttype: 'nmrintegral', \n\t\t\t\t\tfillColor: 'transparent', \n\t\t\t\t\tstrokeColor: '#AF002A', \n\t\t\t\t\tstrokeWidth: '2px',\n\t\t\t\t\tlabel: {\n\t\t\t\t\t\tposition: { },\n\t\t\t\t\t\ttext: 1,\n\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\tanchor: 'middle'\n\t\t\t\t\t},\n\n\t\t\t\t\tshapeOptions: {\n\t\t\t\t\t\tlocked: true\n\t\t\t\t\t}\n\t\t\t\t } );\n\t\t\t\n\t\t\tshape.setSerie( nmr.getGraphX().getSerie( 0 ) );\n\t\t\tshape.setLabelText( \"NMRVal\" );\n\t\t\tshape.draw();\n\t\t\tshape.redraw();\n\n\t\t\treturn shape;\n\t\t}\n\t\t\n\t\tfunction removeSerie( nmr, axis, name ) {\n\n\t\t\tvar serie;\n\t\t\tif( ( serie = nmr.graphs[ axis ].getSerie( name ) ) ) {\n\t\t\t\tserie.kill();\n\t\t\t}\n\n\t\t\tnmr.graphs[ axis ].redraw();\n\t\t\tnmr.graphs[ axis ].drawSeries();\n\n\t\t}\n\n\t\t\t\n\t\tfunction doNMR( nmr ) { \n\n\t\t\n\t\t\n\t\t\t\t\tnmr.options.dom.append('<div />');\n\t\t\t\t\tnmr.makeGraphs1D();\n\t\t\n\t\t}\n\t\n\n\t\tvar NMR = function( options ) {\n\n\t\t\tthis.options = $.extend( true, {}, defaults, options );\n\t\t\tthis.series = [];\n\n\t\t\tthis.minimapClip;\n\t\t\t// 1D\n\t\t\n\n\t\t\tGraph.registerConstructor(\"graph.shape.1dnmr\", Shape1DNMR);\n\t\t\tvar self = this;\n\t\t\t\n/*\n\t\t\tif( this.isSymmetric() ) {\n\t\t\t\tthis.nmrSignal1dOptions.y = $.extend(true, {}, this.nmrSignal1dOptions.x );\n\t\t\t\tthis.nmrSignal1dOptions.y.shapeOptions.axis = 'y';\n\t\t\t}\n\n\t\t\tthis.nmrSignal1dOptions.x = $.extend( true, {}, this.nmrSignal1dOptions.x, {} );\n\t\t\tthis.nmrSignal1dOptions.y = $.extend( true, {}, this.nmrSignal1dOptions.x, {} );\n\n\t\t\t*/\n\t\t\tthis.graphs = { x: null };\n\t\t\tthis.integrals = { x: [] };\n\n\t\t\tdoNMR( this );\n\n\n\t\t\tswitch( this.options.mode ) {\n\t\t\t\tcase '2d':\n\t\t\t\t\t\n\t\t\t\tbreak;\n\n\t\t\t\tcase '1d':\n\t\t\t\t\tthis.legend = this.graphs.makeLegend( { frame: true, frameWidth: 2, frameColor: 'grey', movable: true, backgroundColor: 'white' } );\n\t\t\t\t\tthis.legend.setPosition( { x: \"300px\", y: \"40px\" }, 'right' );\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif( this.options.assignment ) {\n\n\t\t\t\tthis.assignement = new Assignment( $.extend( this.options.assignment, { graphs: this.graphs, domGraphs: this.options.dom } ) );\t\n\t\t\t\t//this.assignement.setAssignment( [ [ \"1\", \"gGQHLIeIUjdA~dPHeT\" ] ] );\n\t\t\t}\n\t\t}\n\n\n\t\tvar loadDefaults = {\n\t\t\turls: {}\n\t\t}\n\n\t\tNMR.prototype.load = function( load ) {\n\n\t\t\tvar load = $.extend( true, {}, loadDefaults, load );\n\t\t\tvar urls = {};\n\t\t\tswitch( this.options.mode ) {\n\n\n\t\t\t\tcase '1d':\n\t\t\t\t\t\n\t\t\t\t\tload.urls.oneD = load.url || load.urls.oneD || load.urls.x;\n\t\t\t\t\turls.x = load.urls.oneD;\t\n\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\n\t\t\tfetchUrls( this, urls, load );\n\t\t}\n\n\n\t\tNMR.prototype.isSymmetric = function() {\n\t\t\treturn this.options.symmetric || false;\n\t\t}\n\n\t\tNMR.prototype.getMode = function() {\n\t\t\treturn this.options.mode;\n\t\t}\n\n\t\tNMR.prototype.getDom = function() {\n\t\t\treturn this.options.dom;\n\t\t}\n\n\t\tNMR.prototype.getGraph2D = function() {\n\t\t\treturn this.graphs['_2d'];\n\t\t}\n\n\t\tNMR.prototype.getGraphX = function() {\n\t\t\treturn this.graphs['x'];\n\t\t}\n\n\t\tNMR.prototype.getGraphY = function() {\n\t\t\treturn this.graphs['y'];\n\t\t}\n\n\t\tNMR.prototype.resize1DTo = function( w, h ) {\n\t\t\tthis.graphs.resize( w, h );\n\t\t\tthis.graphs.drawSeries();\n\t\t}\n\n\t\tNMR.prototype.removeSerieX = function( name ) {\n\t\t\tremoveSerie( this, 'x', name );\n\t\t}\n\n\t\tNMR.prototype.setSerieX = function( name, data, options ) {\n\n\t\t\tif( this.graphs.getSerie( name ) ) {\n\n\t\t\t\tthis.graphs.getSerie( name ).kill();\n\t\t\t\tthis.graphs.removeShapes();\n\t\t\t\tthis.integralBasis = false;\n\n\t\t\t}\n\n\t\t\tvar serie_x = this.graphs.newSerie( name, $.extend( { useSlots: true }, options ) )\n\t\t\t\t.setLabel( \"My serie\" )\n\t\t\t\t.autoAxis()\n\t\t\t\t.setData( data )\n\t\t\t\t.XIsMonotoneous();\n\n\t\t\tif( options.lineColor ) {\n\t\t\t\tserie_x.setLineColor( options.lineColor );\n\t\t\t}\n\n\t\t\tif( options.lineWidth ) {\n\t\t\t\tserie_x.setLineWidth( options.lineWidth );\n\t\t\t}\n\n\t\t\tif( options.setLineStyle ) {\n\t\t\t\tserie_x.setLineStyle( options.lineStyle );\n\t\t\t}\n\n\t\t\t//serie_x.degrade( 1 ).kill()\n\n\t\t\tserie_x.XIsMonotoneous();\n\t\t\tserie_x.getXAxis().setAxisDataSpacingMax(0);\n\t\t\tserie_x.getXAxis().setAxisDataSpacingMin(0);\n\n\t\t\tserie_x.getYAxis().setDisplay( false ).primaryGridOff( false ).secondaryGridOff( false );\n\t\t\tserie_x.getXAxis().flip(true).setLabel('ppm').primaryGridOff( false ).secondaryGridOff( false ).setTickPosition( 'outside' )\n\n\t\t\tthis.graphs.autoscaleAxes();\n\t\t\tthis.graphs.draw();\n\t\t}\n\n\n\t\tNMR.prototype.loaded = function( series, options, name ) {\n\n\n\t\t\tswitch( this.getMode() ) {\n\n\t\t\t\tcase '1d':\n\n\t\t\t\t\tthis.setSerieX( name, series.x.spectra[ 0 ].data[ 0 ], { label: \"SomeLabel\" } );\n\n\n\t\t\t\tbreak;\n\n\n\t\t\t}\n\n\n\t\t}\n\n\t\n\t\tNMR.prototype.makeGraphs1D = function() {\n\n\t\t\tvar self = this;\n\n\t\t\tthis.graphs = new Graph( this.getDom().children().get(0), {\n\n\t\t\t\tclose: { left: false, top: false, right: false },\n\t\t\t\tpaddingBottom: 0,\n\t\t\t\tpaddingTop: 0,\n\t\t\t\tpaddingLeft: 0,\n\t\t\t\tpaddingRight: 0,\n\n\t\t\t\tplugins: {\n\t\t\t\t\t'zoom': { \n\t\t\t\t\t\tzoomMode: 'x'\n\n\t\t\t\t\t},\n\n\t\t\t\t\t'shape': { \n\t\t\t\t\t\ttype: 'nmrintegral',\n\t\t\t\t\t\tstrokeColor: '#AF002A', \n\t\t\t\t\t\tfillColor: \"transparent\",\n\t\t\t\t\t\tstrokeWidth: 2,\n\n\t\t\t\t\t\tlocked: false,\n\t\t\t\t\t\tmovable: true,\n\t\t\t\t\t\tresizable: true,\n\t\t\t\t\t\tselectable: true,\n\t\t\t\t\t\tselectOnMouseDown: true,\n\t\t\t\t\t\thandles: true,\n\t\t\t\t\t\tlabelEditable: true,\n\n\t\t\t\t\t\thorizontal: true, \n\t\t\t\t\t\tforcedCoords: { y: function( shape ) { return ( 20 + shape.serie.getIndex() * 5 ) + \"px\"; } },\n\t\t\t\t\t\tbindable: true,\n\t\t\t\t\t\taxis: 'x',\n\n\t\t\t\t\t\tlabels: [ { text: \"Something\", color: 'red' } ] ,\n\n\n\n\t\t\t\t\t\tattributes: { 'data-bindable': function() { return 1; } },\n\n\t\t\t\t\t\tonCreatedShape: function( shape ) {\n\t\t\t\t\t\t\t//console.log( self.graphs[ 'x' ].getSerie( 0 ) );\n\t\t\t\t\t\t\tshape.setSerie( self.graphs.getSerie( 0 ) );\n\t\t\t\t\t\t\tintegralCreated( self, 'x', shape );\n\t\t\t\t\t\t},\n\n\n\t\t\t\t\t\thighlightOnMouseOver: true\n\t\t\t\t\t},\n\t\t\t\t},\n\n\n\t\t\t\tdblclick: {\n\t\t\t\t\ttype: 'plugin',\n\t\t\t\t\tplugin: 'zoom',\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tmode: 'total'\n\t\t\t\t\t}\n\t\t\t\t},\n\n\n\t\t\t\twheel: {\n\t\t\t\t\ttype: 'plugin',\n\t\t\t\t\tplugin: 'zoom',\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tdirection: 'y',\n\t\t\t\t\t\tbaseline: 0\n\t\t\t\t\t}\n\t\t\t\t},\n\n\n\t\t\t\tpluginAction: {\n\t\t\t\t\t'zoom': { shift: false, ctrl: false },\n\t\t\t\t\t'shape': { shift: true, ctrl: false }\n\t\t\t\t},\n\n\t\t\t\tonBeforeNewShape: function() {\n\n\t\t\t\t\tif( ! this.selectedSerie && this.series.length > 1 ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} );\n\n\n\t\t\tthis.graphs.setHeight(300);\n\t\n\n\t\t\tthis.graphs.on(\"shapeChanged\", function( shape ) {\n\n\t\t\t\t\n\n\t\t\t\tif( shape.getType() == \"nmrintegral\" ) {\n\n\t\t\t\t\trecalculateIntegrals( self );\n\n\t\t\t\t}\n\n\n\n\t\t\t\t\n\t\t\t});\n\n\t\t\tthis.graphs.on(\"shapeLabelChanged\", function( shape ) {\n\n\n\t\t\t\tif( shape.getType() == \"nmrintegral\" ) {\n\n\t\t\t\t\tvar fl = parseFloat( shape.getLabelText( 0 ) );\n\t\t\t\t\tratioSum = shape.sum / fl;\n\t\t\t\t\trecalculateIntegrals( self );\n\n\t\t\t\t}\n\n\n\n\t\t\t} );\n\n/*\n\t\t\tthis.graphs[ 'x' ].on(\"shapeRemoved\", function( shape ) {\n\n\t\t\t\tif( shape.integral ) {\n\t\t\t\t\tintegralRemoved( self, 'x', shape );\n\t\t\t\t} else if( shape.originalShape ) {\n\t\t\t\t\tshape.originalShape.kill();\n\t\t\t\t}\n\t\t\t});\n\n\n\n\t\t\tthis.graphs[ 'x' ].on(\"shapeNew\", function( shape ) {\n\n\t\t\t\tif( shape.getType() == \"1dnmr\" ) {\n\t\t\t\t\tintegralCreated( self, 'x', shape );\n\n\t\t\t\t\tshape.setHighlightAttributes( { 'stroke-width': 5 } );\n\t\t\t\t\tshape.addClass(\"bindable\");\n\t\t\t\t}\n\t\t\t});\n\n*/\n\t\t\n\t\t\t/********************************************/\n\t\t\t/** DRAW ALL ********************************/\n\t\t\t/********************************************/\n\n\n\t\t\tthis.graphs.redraw( );\t\n\t\t\tthis.graphs.drawSeries();\t\n\n\t\t}\n\n\t\treturn NMR;\n\n\t}; // End Factory\n\n\n\n    if( typeof define === \"function\" && define.amd ) {\n        \n\n        define( 'src/nmr.js',[ 'jsgraph', './shape.1dnmr', './assignment', 'jcampconverter', './sd' ], function( Graph, Shape1DNMR, Assignment, JcampConverter, SD ) {\n            return factory( Graph, Shape1DNMR, Assignment, JcampConverter );\n\n        });\n\n    } else if( window ) {\n        \n        if( window.Graph && window.Assignment && window.JcampConverter ) {\n\n        \t// Namespace NMRHandler\n        \twindow.NMRHandler = factory( window.Graph, window.Shape1DNMR, window.Assignment, window.JcampConverter );\t\n\n        } else {\n        \tthrow \"Graph, Assignment or Jcamp is not defined\"\n        }\n    }\n\n}));\n\n"]}